// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             Int     @id @default(autoincrement())
  username       String
  email          String  @unique
  password       String
  fullName       String
  profilePicture String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sosmed_account Sosmed_account?
  avatar         Avatar?
  story          Story[]
  comment        Comment[]
  reaction       Reaction[]
  bookmark       Bookmark[]
  like           Like[]
}

model Story {
  id          Int      @id @default(autoincrement())
  user_id     Int
  title       String
  content     String
  postedAt    DateTime @updatedAt
  like_count  Int      @default(0)
  category_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  users    Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  comment  Comment[]
  reaction Reaction[]
  bookmark Bookmark[]
  like     Like[]
}

model Category {
  id            Int           @id @default(autoincrement())
  category_name Category_name
  description   String
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  story Story[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  user_id    Int
  story_id   Int
  content    String
  commentAt  DateTime @updatedAt
  create_at  DateTime @default(now())
  updated_at DateTime @updatedAt

  users Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  story Story @relation(fields: [story_id], references: [id], onDelete: Cascade)
}

model Platform {
  id            Int           @id @default(autoincrement())
  platform_name PLATFORM_NAME
  create_at     DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  sosmed_account Sosmed_account[]
}

model Sosmed_account {
  id          Int      @id @default(autoincrement())
  user_id     Int      @unique
  platform_id Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user     Users    @relation(fields: [user_id], references: [id])
  platform Platform @relation(fields: [platform_id], references: [id])
}

model Avatar {
  id         Int      @id @default(autoincrement())
  image_link String
  user_id    Int      @unique
  create_at  DateTime @default(now())
  updated_at DateTime @updatedAt

  user Users @relation(fields: [user_id], references: [id])
}

model Reaction {
  id            Int           @id @default(autoincrement())
  user_id       Int
  story_id      Int
  reaction_type REACTION_TYPE
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  user  Users @relation(fields: [user_id], references: [id])
  story Story @relation(fields: [story_id], references: [id])

  @@unique([user_id, story_id])
}

model Bookmark {
  id         Int      @id @default(autoincrement())
  user_id    Int
  story_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user  Users @relation(fields: [user_id], references: [id])
  story Story @relation(fields: [story_id], references: [id])

  @@unique([user_id, story_id])
}

model Like {
  id         Int      @id @default(autoincrement())
  user_id    Int
  story_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user  Users @relation(fields: [user_id], references: [id])
  story Story @relation(fields: [story_id], references: [id])

  @@unique([user_id, story_id])
}

enum PLATFORM_NAME {
  facebook
  twitter
  instagram
  tiktok
}

enum Category_name {
  berita
  teknologi
  olahraga
  wisata
  lifestyle
  hiburan
}

enum REACTION_TYPE {
  like
  love
  haha
  wow
  sad
  angry
}
